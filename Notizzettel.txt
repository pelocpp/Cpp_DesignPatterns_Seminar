===============================

Seminar "C++ Design Pattern"

Peter Loos // Du

peter.loos@gmx.de
----------------

https://github.com/pelocpp


30+ Jahre:

i) Entwicklung
ii) Schulung / Training

== C/C++, Java, C#, Mobile Programming, JavaScript, (Python)

Back to the Roots: C++

Guten Morgen

===============================

a) Visual Studio 2022 (Community - for free)

b) Github:

https://github.com/pelocpp

===============================

Was sind meine Erwartungen an dieses Seminar ???

Was MUSS drin sein

Überblick ...

===============================

== Erzeugungsmuster

== Anti - Pattern

== Übersichtlichkeit des Codes :)

== Erkennen ???

== Wann brauche ich welches Pattern :)

===============================

Frage: Stellt Fragen !!!!!!!!!!!!!!!!!!!

Pause ... um / ab 12.30 

===============================

1. Vorabbemerkung:

== Erkennen ???

== Wann brauche ich welches Pattern :)

== Neue Aufgabe umzusetzen hat // Mindset nachdenken ...

Schwierigste Frage:

a) Man sollte sie kennen / gelernt haben ...

b) Beispiele ...

   i)  Konzeptionelle Beispiel // eine Beschreibung (UML) in Quellcode (C++) umsetzen

   ii) Anwendungs-Beispiel // Real-World Beispiel

===============================================

Single Responsibility Principle <=> God Object

===============================================

Code Smell:  Smell: Geruch // Code riecht // stinkt

================================================

Lösung ist vorhanden

Sind glücklich

Neue Anforderungen !

Frage !!!!!!!!!!!!!!!! : Ist meine aktuelle SW flexibel ??????????????

Flexibilität bedeutet im Regelfall: MEHRERE Klassen // breiteres Spektrum // Zeit // Verständnis 

================================================

a) Ganz enger Weg:  Prototyp // Ziel erreichen // verifizieren.

b) Redesign: Breiten Weg wählst.

================================================

Idiom / Prinzip / Richtlinie / Guide Line

==============================================

Teile der SW entkoppeln !!!!!!!!

Wie: das kann man mit Interfaces erreichen.

===> Losen Kopplung.

==============================================

Adapter Pattern:

Programm: Daten: JSON (Format)

Provider: XML (Format)

==============================================

Function Pointer: Gute Frage

Jepp, ginge:

Tabelle:

switch (format)

{ "avi", fp1 },
{ "mp3", fp2 },
{ "mp4", fp3 },

Etwas zu Prozedural // zu wenig Objekt-orientiert.

Ist ein anderer Ansatz als das Adapter Pattern:

Pro - Contra:   

Wenn die Formate / Inkompatibilitäten WEITER auseinander gehen:

Pattern: Da ist Platz in den Methoden für Umbereitung / Nachbereitung.

Hinweis:  Function Pointer:  Strategy Pattern  versus Function Pointer versus 'std::function'

==============================================

Adapter

Proxy 

==============================================

Was sind die Unterschiede zwischen Adapter Pattern und Proxy Pattern?

== Beide verstecken Klassen hinter dem Rücken des Anwenders

== Proxy leitet nur WEITER.

== Adapter leitet auch WEITER, aber er muss die Anforderung umformulieren (XML nach JSON) ,
     und dann entscheiden, an wen er weiterleitet, wenn mehrere Zielobjekte in Frage kommen.

== Ein Proxy formuliert die Daten NICHT um --- im Gegenteil:

   Er leitet 1:1 weiter / der Client soll davon ja nichts mitbekommen.

== Ein Proxy kann - vor dem eigentlichen Zielaufruf - ergänzende Aktionen tun (Logging. ...)
   bis hin zur Verweigerung des eigentlichen Zielaufrufs.

== Bzgl. des Umfangs der Verdeckung / dessen, was versteckt wird:

a) Proxy: Müsste die ganze Schnittstelle des Zielobjekts umsetzen.

b) Adapter: Legt die vom Client geforderten Methoden offen.

     Im Regelfall sehen wir hier ein oder mehrere Methoden,
     aber nicht das Interface einer gesamten Klasse.


=====================================================

"Einen Proxy für den Adaptee anlegen"

Was ist bei diesem Satz in Hochkomma gemeint:

Damit sollte eigentlich im Proxy eine andere Schnittstelle einhergehen,
eine, die der Client versteht.

Eager vs. Lazy Proxy:

Eager:  eifrig, begierig ==>   direkte Methodenaufruf

Lazy: faul               ==>   kein direkter Methodenaufruf  // on demand , erst wenn es NOTWENDIG ist

=====================================================

Was kann man als "Strategie" auffassen ?? Methode

a) Sortieren:  std::sort ===> Kriterium: aufwärts / abwärts 
                              Personen:  Namen, Alter, Wohnort ...

b) Hierarchie von graf. Klassen:

   Zeichnen:  Windows - Subsystem
              Linux - Subsystem

              Betriebssystem - Spezifika:  ==> Strategy

Strategy - Pattern:

a) Klassisch

b) Modern C++


Funktionszeiger:
================

Einstufung: Okay, sind ein Sprachmittel von C++

==> Sind nicht so wirklich OO

==> Alternativ:  Schnittstellenzeiger // adressiert mehrere Methoden eines Objekts // ==> OO

C++:  std::function

Ist eine universelle Hülle für alles Aufrufbare :)

===========================================

Gilt für viele Pattern:

a) Prinzipiell sind Umsetzungen der Pattern DYNAMISCH ausgelegt / konzipiert.

b) C++ kann das 

c) C++: Generische Sprache : Templates  // Statisch // Übersetzungszeit // Compile-Time.

Geht das auch mit Design Pattern: Statische Umsetzung eines Patterns.

Ja.

Beispiel:

Textformate:

== HTML
== Markdown

Listen: Aufzählung mit Punkt vorne dran.


HTML: 

<ul>
  <li>A</li>
</ul>

Markdown:

  * A


IListStrategy ermöglicht die Erzeugung derartiger Listen in verschiedenen Formaten.

A) Ein Interface beschreibt Methoden für abgeleitete Klassen
   (virtual)  // doppelt indirekt

B) Pendant: Ab C++ 20:  concept / requires

   Ginge auch ohne dieses Pendant -- Punkt B könnte wegfallen.


   'StaticStrategyPatternExample::TextProcessorEx': 
   
   the associated constraints are not satisfied

=====================================================

Template Method Pattern

// VORSICHT: Hat nichts mit Templates von C++ zu tun.

Beispiel:

Spiele

Tetris:

Figuren:  8 Figuren.   Rechteck  // 

Wie bewegt sich eine Figur: 

== Nach unten
== Kann drehen
== Nach links
== Nach rechts
== Ende erreicht, wenn unten kein Platz

Idee:
Irgendwie sollte / könnte man für die Bewegung EINE FUNKTION / Methode
schreiben:

void bewegeTetrimino ()     // Methode: Schablone für alle existierenden Figuren / Bauteile angesehen.
{
    while (true) {
        == Nach unten   // bewegeNachUnten();
        == Kann drehen
        == Nach links
        == Nach rechts
        == Ende erreicht, wenn unten kein Platz //  break;
    }
}

Zentrale Methode: Diese ist NICHT virtuell  !!!

Frage: Wie kann man die Spezifika der 8 verschiedenen Figuren 
da mit rein bringen so dass ich einen Gewinn mit DIESER EINEN Methode habe.

// ============================================================

Unterschied Strategy Pattern // Template Method Pattern

== Beide betrachten eine Methode 

== Die Funktionalität dieser "Methode" (abstract) beim Strategy Pattern
   soll unterschiedlich sein // um unterschiedliche Ausführungen zu erhalten.

== Die Funktionalität dieser "Methode" (Schablonenmethode) beim Template Method Pattern
   gibt es genau EINMAl. Und diese ist NICHT änderbar.


==============================================================

Virtueller Konstruktor
----------------------

Erstelle eine Kopie eines Objekts.

Wo ist das Problem ??? Kopier-Konstruktor.

Erstelle eine Kopie :  Wovon ??? Was habe ich ???

Beispiel:

Spiele-Programmierung:

Spielbrett // Game Board

Figuren // figures

Pseudo-Code:


Figure* board [8][8];

Schachbrett:   

Da stehen auf jeder Zelle andere Figuren .. oder keine ...
aber alle leiten sich von einer Basisklasse "Figure" ab.

Brauche eine echte Kopie des Spielbretts:

Um den / die nächsten Zug / Züge zu berechnen.
Um den "besten" Zug aussuchen zu können.

Langer Rede, kurzer Sinn:

Figure* figur;   // Basisklassenzeiger 

// Kopie:

==> Tower, Queen, Pawn

figur ==> auf die abgeleitete Klasse.

Wie kann ich bei Kenntnis des Basisklassenzeigers eine Kopie des Objekts erstellen,
auf das der Basisklassenzeiger zeigt ???

Java // C#:   

Java:  clone

C#:  ICloneable => clone


Virtueller Konstruktor

        virtual Prototype* clone() const override
        {
            return new ConcretePrototype{ *this };
        }

Ist das ein Widerspruch, das ein Ergebnis des Typs ConcretePrototype zurückgeliefert wird,
und nicht der Typ der Basisklasse in Erscheinung tritt.

Vererbung:  Ist-Ein Beziehung:   Ein ConcretePrototype-Objekt "ist-ein" Prototype-Objekt.


    static void clientCode(Prototype* original)
    {
        Prototype* copy{ original->clone() };


Konkret:

ChessFigure: Abstrakte Basisklasse

Prototype == ChessFigure

class Tower : public ChessFigure

ConcretePrototype == Tower

    static void clientCode(ChessFigure* original)
    {
        ChessFigure* copy = original->clone();  // was soll hier rauskommen: ein Tower 

        // Ein Objekt genau des Typs, der zur LAUFZEIT vorhanden ist:
        // also wenn ein Turm, dann eine Turm-Kopie
        // wenn eine Dame, dann eine Kopie der Dame
    }

    ...
    {
        Tower* t = new Tower();

        clientCode (t);  // reales Objekt  zur RUNTIME
    }

Wann brauch ich so etwas ???

Hmm, wenn ich in Container (Schachbrett) eine Reihe von Basisklassenzeigern habe,
und von diesem Container eine ECHTE Kopie benötige !!!

// Beobachtung: Ähnlichkeiten zu Templates:

Jein:  Templates sind austauschbar ... zur ÜBERSETZUNGSZEIT.

std::vector<int> numbers;

std::vector<double> moreNumbers;

// ========================================================

Wann muss ich den Kopier-Konstruktor selber schreiben:

Wenn Pointer / dyn. Daten / new/ delete / vorhanden sind.
Diese dürfen NICHT 1:1 dupliziert werden ==> Doppeltes delete: NO-Go

Wo keine Pointer: Rule-of-ZERO ==> Der Compiler macht das für uns.

// ========================================================

Factory

Factory-Pattern:  Inflation an derartigen Pattern.

Enge Kopplung:  Exakte Kenntnis der Konstruktor // der Klassen 

Aussage: Muss als Anwender in einem Team nicht detaillierte Kenntniss von "deren" Klassen.

==> Funktionalität von "deren" Klassen haben

Beobachtung: Trennung von einer Reihe von Klassen (Details) und einer Anwendung kann Sinn ergeben.

Auch so rum:

Habe als Anwender den Namen einer Klasse in meinem Quellcode verankert.   Lose  Kopplung .

// ========================================================


Color.FromArgb Methode

A) Fabrik-Gedanke: Wegen der Erzeugungsmethoden   'FromArgb'

Whyyyyyyyyyyyyyyyyyyyyyyy   new Color (100, 0 , 0);

Anderer Grund: Bei vielen gleichen Objekten expldiert meine Speicheranforderung.

==>   'FromArgb' ist etwas versteckt:  Singleton. // gleiche Farben 
                                        werden vom gleichen Objekt beschrieben.

// ========================================================

2 neue Keywords im Umfeld der Vererbung:

virtual
override   neu
final      neu

final:

2 Ansätze:

i) Verbieten des Ableitens / des eine abgeleitete Klasse erzeugens

ii) Verbieten des Überschreibens einer einzelnen Methode



// =======================================================

Abstract Factory

Java

UI Swing  ==> Look & Feel:   Metal // Motif // ............


Was hat das Proxy-Pattern mit Abstract Factory zu tun ??????????

Erst mal nichts.

Aber: Eine Fabrik kann VIEL Speicher belegen.

Man kann / sollte nicht alle Fabriken im Speicher halten.

Idee / Ansatz: Vor eine Fabrik wird ein Proxy-Objekt gestellt:

Lazy-Prinzip:

// =======================================================

Facade Pattern

"Da legen wir mal eine Schicht drüber ..."       ===> Performanz

Bekannte Beispiele:   Win32 API (C/C++) ==> .NET (C#)

STL: std::mutex, std::thread (Concurrency)  ==> Für das API des jeweils zu Grunde liegenden Betriebssystems.

// =======================================================

std::unique_ptr // std::shared_ptr  ==> weak_ptr

Observer Pattern:

===========================

RAII:  Wichtig

Resources:

Beobachtung: 2 Methode:   

== attach / detach ( ... )

== open / close (FILE)  (Socket ?!?)

== CreateThread // ReleaseHandle (Threads)

== Mutex-Objekt:  lock / unlock

== SqlConnection:

Worum geht's: Wenn der 2. Aufruf fehlt, kann das bisweilen FATALE Folgen haben.

a) Der 2. Aufruf muss an der richtigen Stelle platziert werden.

Was ist, wenn diese Stelle nicht erreicht wird.  // Fehler // Raus-testen ...

Idee:

OO // Objekte // 

Konstruktoren
Destruktoren

Destruktor: Dieser wird DETERMINISTISCH aufgerufen - wenn das Objekt zerstört wird // am Ende des Scopes.

Idee:

Man verlagere das Resourcen-Objekt in ein Hüllen-Objekt

Konstruktors:   1. Aufruf
Destruktor:     2. Aufruf


===============================================================

Observable - Observer Pattern

==> std::weak_ptr

==> shared_from_this

Hintergrund:

Es gibt ein Objekt mit wichtigem Zustand, der sich ändern kann. 

   // Wetterdaten  // Aktienkurse

   // Event Source, Subject, Observable

Es gibt andere Objekte, die sich für derartige Änderungen interessieren.

==> Polling:  Zyklisch, alle 100ms abfragen .....

==> Event Sink, Event Client, Oberserver

=========================================

Ein Detail

update (Data data);

Hmmm: Hat sich viel oder wenig geändert ???
      Es könnten verschienden Werte sich geändert haben ???

Alternative:

update ();       // Keine Parameter   // Ping dar: es hat sich "etwas" geändert

updateSmall ();  // Keine Parameter
updateLarge ();  // Keine Parameter

Konsequenz:

Der Client kann beim Eintreffen der update- Methde selbst entscheiden,
welche Wert er vom Subject (via getter ()) abholt.

============================================================

Das Szenario verwendet Smart Pointer:

Clients:    std::shared_ptr  // Besitzer

Subject:    std::shared_ptr  // andere Besitzer

Weiterer Aspekt:

Das Subject verwaltet eine Liste von aktuellen Beobachtern:

    std::list< std::shared_ptr<> >    m_observers;  // Nicht mein Ansatz
    std::vector< std::shared_ptr<> >  m_observers;

    std::list< std::weak_ptr<> >    m_observers;    // Mein Ansatz
    std::vector< std::weak_ptr<> >  m_observers;

    Hmmm, was ist, wenn das tatsächliche Objekt nicht mehr existiert ???

Beispiel: Beobachter für Aktienkurse von VW.  // Client (VW)

// ================================================

std::weak_ptr<>:

Jetzt gibt es ein Detail-Problem:

std::list< std::weak_ptr<> >  :   Hinzufügen: NO PROBLEM
std::vector< std::weak_ptr<> >:   Entfernen:  Nicht trivial

Why: list.remove(wp);  ==> Den WP in der Liste suchen: Vergleicht :

std::weak_ptr<>  haben KEINEN == Operator !!!!!!!!!!!

// ==================================

Nachteil von einer Kopie eines weak_ptrs:

Aus logischer Sicht NEIN.

counter ++;  // thread-sichere Operation  // atomare Operation

// ==================================

Es sind viele shared_ptr im Umlauf:

Gibt es davon WIRKLICH shared_ptr, die auch ihr Objekt wieder FREIGEBEN.

Visualisierung:

Die "malt" Wetterdaten oder Aktienkurse:

Hmmm dann kommt bei lock => nullptr:

=========================================

shared_from_this
================

std::shared oder std::unique

Beobachtung:

Bin in einer Methode:   this 

Meine Clients sprechen mit aber nicht über einen ZEIGER an,
sonder über einen std::shared:

Statt: this ==> std::shared_ptr<>(this)

=========================================

Builder Pattern:

a) Um komplexe und komplizierte Objekte stückweise und intuitiver erstellen zu können.

b) Nebeneffekt:

Idiom:   Konstruktoren mit benannten Parameter  // Named Parameters Constructor

Fluent Programming Style:


Builder Pattern:

Konstruktor: Damit hat es sich ...

Objekt: Als Hülle / Rumpf erstellt wird mit einem Konstruktor.

Bekannt:

Eine Option: Konstruktoren mit 10 Parametern.  Neeeeeeeeeeeeeeeeeeee

Fluent Builder:

Syntatic Sugar:  

Person p{ Person::create("Jack")
    .lives("Great Britain")
    .at("17 Sloane Street")
    .with_postcode("SW1X 9NU")
    .in("London")
 //   .works("Information Technology")
    .with("Software Manufactur")
    .as_a("Consultant")
};

Alternative:

Eine struct befüllen und übergeben.

Die Alternative zu

typedef struct tagWNDCLASSA {
  UINT      style;
  WNDPROC   lpfnWndProc;
  int       cbClsExtra;
  int       cbWndExtra;
  HINSTANCE hInstance;
  HICON     hIcon;
  HCURSOR   hCursor;
  HBRUSH    hbrBackground;
  LPCSTR    lpszMenuName;
  LPCSTR    lpszClassName;
} WNDCLASSA, *PWNDCLASSA, *NPWNDCLASSA, *LPWNDCLASSA;

13:50